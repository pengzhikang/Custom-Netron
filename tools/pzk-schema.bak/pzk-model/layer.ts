// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from './flatbuffers';

import { Attributes } from '../pzk-model/attributes';
import { Connect } from '../pzk-model/connect';


export class Layer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Layer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLayer(bb:flatbuffers.ByteBuffer, obj?:Layer):Layer {
  return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLayer(bb:flatbuffers.ByteBuffer, obj?:Layer):Layer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

inputNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

outputNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

inputId(index: number, obj?:Connect):Connect|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Connect()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

inputIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

outputId(index: number, obj?:Connect):Connect|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Connect()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

outputIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

requireAttrs():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

attrs(obj?:Attributes):Attributes|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new Attributes()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startLayer(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, typeOffset, 0);
}

static addInputNum(builder:flatbuffers.Builder, inputNum:number) {
  builder.addFieldInt8(3, inputNum, 0);
}

static addOutputNum(builder:flatbuffers.Builder, outputNum:number) {
  builder.addFieldInt8(4, outputNum, 0);
}

static addInputId(builder:flatbuffers.Builder, inputIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, inputIdOffset, 0);
}

static createInputIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInputIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOutputId(builder:flatbuffers.Builder, outputIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, outputIdOffset, 0);
}

static createOutputIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOutputIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRequireAttrs(builder:flatbuffers.Builder, requireAttrs:boolean) {
  builder.addFieldInt8(7, +requireAttrs, +false);
}

static addAttrs(builder:flatbuffers.Builder, attrsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, attrsOffset, 0);
}

static endLayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
