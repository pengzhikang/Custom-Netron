// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from './flatbuffers';

import { DataLayout } from '../pzk-model/data-layout';
import { DataType } from '../pzk-model/data-type';
import { TensorShape } from '../pzk-model/tensor-shape';
import { TensorType } from '../pzk-model/tensor-type';
import { Weights } from '../pzk-model/weights';


export class Tensor {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Tensor {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTensor(bb:flatbuffers.ByteBuffer, obj?:Tensor):Tensor {
  return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTensor(bb:flatbuffers.ByteBuffer, obj?:Tensor):Tensor {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tesorType():TensorType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TensorType.CONST;
}

dataType():DataType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DataType.INT32;
}

dataLayout():DataLayout {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DataLayout.NCHW;
}

shape(obj?:TensorShape):TensorShape|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new TensorShape()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

weights(obj?:Weights):Weights|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Weights()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTensor(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addTesorType(builder:flatbuffers.Builder, tesorType:TensorType) {
  builder.addFieldInt8(2, tesorType, TensorType.CONST);
}

static addDataType(builder:flatbuffers.Builder, dataType:DataType) {
  builder.addFieldInt8(3, dataType, DataType.INT32);
}

static addDataLayout(builder:flatbuffers.Builder, dataLayout:DataLayout) {
  builder.addFieldInt8(4, dataLayout, DataLayout.NCHW);
}

static addShape(builder:flatbuffers.Builder, shapeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, shapeOffset, 0);
}

static addWeights(builder:flatbuffers.Builder, weightsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, weightsOffset, 0);
}

static endTensor(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
