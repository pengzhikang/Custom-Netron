// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from './flatbuffers';

export class time {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):time {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstime(bb:flatbuffers.ByteBuffer, obj?:time):time {
  return (obj || new time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstime(bb:flatbuffers.ByteBuffer, obj?:time):time {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

year():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 1998;
}

month():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 10;
}

day():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 11;
}

hour():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 6;
}

min():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 6;
}

sec():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 6;
}

static starttime(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addYear(builder:flatbuffers.Builder, year:number) {
  builder.addFieldInt32(0, year, 1998);
}

static addMonth(builder:flatbuffers.Builder, month:number) {
  builder.addFieldInt8(1, month, 10);
}

static addDay(builder:flatbuffers.Builder, day:number) {
  builder.addFieldInt8(2, day, 11);
}

static addHour(builder:flatbuffers.Builder, hour:number) {
  builder.addFieldInt8(3, hour, 6);
}

static addMin(builder:flatbuffers.Builder, min:number) {
  builder.addFieldInt8(4, min, 6);
}

static addSec(builder:flatbuffers.Builder, sec:number) {
  builder.addFieldInt8(5, sec, 6);
}

static endtime(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtime(builder:flatbuffers.Builder, year:number, month:number, day:number, hour:number, min:number, sec:number):flatbuffers.Offset {
  time.starttime(builder);
  time.addYear(builder, year);
  time.addMonth(builder, month);
  time.addDay(builder, day);
  time.addHour(builder, hour);
  time.addMin(builder, min);
  time.addSec(builder, sec);
  return time.endtime(builder);
}
}
