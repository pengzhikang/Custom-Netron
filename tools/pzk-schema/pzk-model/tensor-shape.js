"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.TensorShape = void 0;
var flatbuffers = require("flatbuffers");
var TensorShape = /** @class */ (function () {
    function TensorShape() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TensorShape.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TensorShape.getRootAsTensorShape = function (bb, obj) {
        return (obj || new TensorShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TensorShape.getSizePrefixedRootAsTensorShape = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TensorShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TensorShape.prototype.dimsize = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    };
    TensorShape.prototype.dims = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    TensorShape.prototype.dimsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    TensorShape.prototype.dimsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    TensorShape.startTensorShape = function (builder) {
        builder.startObject(2);
    };
    TensorShape.addDimsize = function (builder, dimsize) {
        builder.addFieldInt8(0, dimsize, 0);
    };
    TensorShape.addDims = function (builder, dimsOffset) {
        builder.addFieldOffset(1, dimsOffset, 0);
    };
    TensorShape.createDimsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    TensorShape.startDimsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    TensorShape.endTensorShape = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TensorShape.createTensorShape = function (builder, dimsize, dimsOffset) {
        TensorShape.startTensorShape(builder);
        TensorShape.addDimsize(builder, dimsize);
        TensorShape.addDims(builder, dimsOffset);
        return TensorShape.endTensorShape(builder);
    };
    return TensorShape;
}());
exports.TensorShape = TensorShape;
