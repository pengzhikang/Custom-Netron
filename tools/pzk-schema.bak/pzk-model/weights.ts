// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from './flatbuffers';

export class Weights {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Weights {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWeights(bb:flatbuffers.ByteBuffer, obj?:Weights):Weights {
  return (obj || new Weights()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWeights(bb:flatbuffers.ByteBuffer, obj?:Weights):Weights {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Weights()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eleBytes():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

eleNum():flatbuffers.Long {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
}

buffer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

bufferLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bufferArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startWeights(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addEleBytes(builder:flatbuffers.Builder, eleBytes:number) {
  builder.addFieldInt8(0, eleBytes, 0);
}

static addEleNum(builder:flatbuffers.Builder, eleNum:flatbuffers.Long) {
  builder.addFieldInt64(1, eleNum, builder.createLong(0, 0));
}

static addBuffer(builder:flatbuffers.Builder, bufferOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, bufferOffset, 0);
}

static createBufferVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startBufferVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endWeights(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWeights(builder:flatbuffers.Builder, eleBytes:number, eleNum:flatbuffers.Long, bufferOffset:flatbuffers.Offset):flatbuffers.Offset {
  Weights.startWeights(builder);
  Weights.addEleBytes(builder, eleBytes);
  Weights.addEleNum(builder, eleNum);
  Weights.addBuffer(builder, bufferOffset);
  return Weights.endWeights(builder);
}
}
