"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Weights = void 0;
var flatbuffers = require("flatbuffers");
var Weights = /** @class */ (function () {
    function Weights() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Weights.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Weights.getRootAsWeights = function (bb, obj) {
        return (obj || new Weights()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Weights.getSizePrefixedRootAsWeights = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Weights()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Weights.prototype.eleBytes = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    };
    Weights.prototype.eleNum = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    Weights.prototype.buffer = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Weights.prototype.bufferLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Weights.prototype.bufferArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Weights.startWeights = function (builder) {
        builder.startObject(3);
    };
    Weights.addEleBytes = function (builder, eleBytes) {
        builder.addFieldInt8(0, eleBytes, 0);
    };
    Weights.addEleNum = function (builder, eleNum) {
        builder.addFieldInt64(1, eleNum, builder.createLong(0, 0));
    };
    Weights.addBuffer = function (builder, bufferOffset) {
        builder.addFieldOffset(2, bufferOffset, 0);
    };
    Weights.createBufferVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Weights.startBufferVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Weights.endWeights = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Weights.createWeights = function (builder, eleBytes, eleNum, bufferOffset) {
        Weights.startWeights(builder);
        Weights.addEleBytes(builder, eleBytes);
        Weights.addEleNum(builder, eleNum);
        Weights.addBuffer(builder, bufferOffset);
        return Weights.endWeights(builder);
    };
    return Weights;
}());
exports.Weights = Weights;
