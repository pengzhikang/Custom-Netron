"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Tensor = void 0;
var flatbuffers = require("flatbuffers");
var data_layout_1 = require("../pzk-model/data-layout");
var data_type_1 = require("../pzk-model/data-type");
var tensor_shape_1 = require("../pzk-model/tensor-shape");
var tensor_type_1 = require("../pzk-model/tensor-type");
var weights_1 = require("../pzk-model/weights");
var Tensor = /** @class */ (function () {
    function Tensor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Tensor.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Tensor.getRootAsTensor = function (bb, obj) {
        return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Tensor.getSizePrefixedRootAsTensor = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Tensor.prototype.id = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    Tensor.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Tensor.prototype.tesorType = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : tensor_type_1.TensorType.CONST;
    };
    Tensor.prototype.dataType = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : data_type_1.DataType.INT32;
    };
    Tensor.prototype.dataLayout = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : data_layout_1.DataLayout.NCHW;
    };
    Tensor.prototype.shape = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new tensor_shape_1.TensorShape()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    Tensor.prototype.weights = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new weights_1.Weights()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    Tensor.startTensor = function (builder) {
        builder.startObject(7);
    };
    Tensor.addId = function (builder, id) {
        builder.addFieldInt32(0, id, 0);
    };
    Tensor.addName = function (builder, nameOffset) {
        builder.addFieldOffset(1, nameOffset, 0);
    };
    Tensor.addTesorType = function (builder, tesorType) {
        builder.addFieldInt8(2, tesorType, tensor_type_1.TensorType.CONST);
    };
    Tensor.addDataType = function (builder, dataType) {
        builder.addFieldInt8(3, dataType, data_type_1.DataType.INT32);
    };
    Tensor.addDataLayout = function (builder, dataLayout) {
        builder.addFieldInt8(4, dataLayout, data_layout_1.DataLayout.NCHW);
    };
    Tensor.addShape = function (builder, shapeOffset) {
        builder.addFieldOffset(5, shapeOffset, 0);
    };
    Tensor.addWeights = function (builder, weightsOffset) {
        builder.addFieldOffset(6, weightsOffset, 0);
    };
    Tensor.endTensor = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    return Tensor;
}());
exports.Tensor = Tensor;
