"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.PModel = void 0;
var flatbuffers = require("flatbuffers");
var layer_1 = require("../pzk-model/layer");
var tensor_1 = require("../pzk-model/tensor");
var time_1 = require("../pzk-model/time");
var PModel = /** @class */ (function () {
    function PModel() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PModel.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PModel.getRootAsPModel = function (bb, obj) {
        return (obj || new PModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PModel.getSizePrefixedRootAsPModel = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PModel.bufferHasIdentifier = function (bb) {
        return bb.__has_identifier('PZKM');
    };
    PModel.prototype.author = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    PModel.prototype.createTime = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new time_1.time()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    PModel.prototype.version = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    PModel.prototype.modelName = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    PModel.prototype.modelRuntimeInputNum = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    PModel.prototype.modelRuntimeOutputNum = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    PModel.prototype.modelRuntimeInputId = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    PModel.prototype.modelRuntimeInputIdLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PModel.prototype.modelRuntimeInputIdArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    PModel.prototype.modelRuntimeOutputId = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    PModel.prototype.modelRuntimeOutputIdLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PModel.prototype.modelRuntimeOutputIdArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    PModel.prototype.allTensorNum = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    PModel.prototype.tensorBuffer = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new tensor_1.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    PModel.prototype.tensorBufferLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PModel.prototype.layerNum = function () {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    PModel.prototype.layerBuffer = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? (obj || new layer_1.Layer()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    PModel.prototype.layerBufferLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PModel.startPModel = function (builder) {
        builder.startObject(12);
    };
    PModel.addAuthor = function (builder, authorOffset) {
        builder.addFieldOffset(0, authorOffset, 0);
    };
    PModel.addCreateTime = function (builder, createTimeOffset) {
        builder.addFieldOffset(1, createTimeOffset, 0);
    };
    PModel.addVersion = function (builder, versionOffset) {
        builder.addFieldOffset(2, versionOffset, 0);
    };
    PModel.addModelName = function (builder, modelNameOffset) {
        builder.addFieldOffset(3, modelNameOffset, 0);
    };
    PModel.addModelRuntimeInputNum = function (builder, modelRuntimeInputNum) {
        builder.addFieldInt32(4, modelRuntimeInputNum, 0);
    };
    PModel.addModelRuntimeOutputNum = function (builder, modelRuntimeOutputNum) {
        builder.addFieldInt32(5, modelRuntimeOutputNum, 0);
    };
    PModel.addModelRuntimeInputId = function (builder, modelRuntimeInputIdOffset) {
        builder.addFieldOffset(6, modelRuntimeInputIdOffset, 0);
    };
    PModel.createModelRuntimeInputIdVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    PModel.startModelRuntimeInputIdVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    PModel.addModelRuntimeOutputId = function (builder, modelRuntimeOutputIdOffset) {
        builder.addFieldOffset(7, modelRuntimeOutputIdOffset, 0);
    };
    PModel.createModelRuntimeOutputIdVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    PModel.startModelRuntimeOutputIdVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    PModel.addAllTensorNum = function (builder, allTensorNum) {
        builder.addFieldInt32(8, allTensorNum, 0);
    };
    PModel.addTensorBuffer = function (builder, tensorBufferOffset) {
        builder.addFieldOffset(9, tensorBufferOffset, 0);
    };
    PModel.createTensorBufferVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    PModel.startTensorBufferVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    PModel.addLayerNum = function (builder, layerNum) {
        builder.addFieldInt32(10, layerNum, 0);
    };
    PModel.addLayerBuffer = function (builder, layerBufferOffset) {
        builder.addFieldOffset(11, layerBufferOffset, 0);
    };
    PModel.createLayerBufferVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    PModel.startLayerBufferVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    PModel.endPModel = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    PModel.finishPModelBuffer = function (builder, offset) {
        builder.finish(offset, 'PZKM');
    };
    PModel.finishSizePrefixedPModelBuffer = function (builder, offset) {
        builder.finish(offset, 'PZKM', true);
    };
    return PModel;
}());
exports.PModel = PModel;
