"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Layer = void 0;
var flatbuffers = require("./flatbuffers");
var attributes_1 = require("../pzk-model/attributes");
var connect_1 = require("../pzk-model/connect");
var Layer = /** @class */ (function () {
    function Layer() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Layer.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Layer.getRootAsLayer = function (bb, obj) {
        return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Layer.getSizePrefixedRootAsLayer = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Layer.prototype.id = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    Layer.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Layer.prototype.type = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Layer.prototype.inputNum = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    };
    Layer.prototype.outputNum = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    };
    Layer.prototype.inputId = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new connect_1.Connect()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Layer.prototype.inputIdLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Layer.prototype.outputId = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new connect_1.Connect()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Layer.prototype.outputIdLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Layer.prototype.requireAttrs = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    Layer.prototype.attrs = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new attributes_1.Attributes()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    Layer.startLayer = function (builder) {
        builder.startObject(9);
    };
    Layer.addId = function (builder, id) {
        builder.addFieldInt32(0, id, 0);
    };
    Layer.addName = function (builder, nameOffset) {
        builder.addFieldOffset(1, nameOffset, 0);
    };
    Layer.addType = function (builder, typeOffset) {
        builder.addFieldOffset(2, typeOffset, 0);
    };
    Layer.addInputNum = function (builder, inputNum) {
        builder.addFieldInt8(3, inputNum, 0);
    };
    Layer.addOutputNum = function (builder, outputNum) {
        builder.addFieldInt8(4, outputNum, 0);
    };
    Layer.addInputId = function (builder, inputIdOffset) {
        builder.addFieldOffset(5, inputIdOffset, 0);
    };
    Layer.createInputIdVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Layer.startInputIdVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Layer.addOutputId = function (builder, outputIdOffset) {
        builder.addFieldOffset(6, outputIdOffset, 0);
    };
    Layer.createOutputIdVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Layer.startOutputIdVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Layer.addRequireAttrs = function (builder, requireAttrs) {
        builder.addFieldInt8(7, +requireAttrs, +false);
    };
    Layer.addAttrs = function (builder, attrsOffset) {
        builder.addFieldOffset(8, attrsOffset, 0);
    };
    Layer.endLayer = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    return Layer;
}());
exports.Layer = Layer;
