// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Layer } from '../pzk-model/layer';
import { Tensor } from '../pzk-model/tensor';
import { time } from '../pzk-model/time';


export class PModel {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PModel {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPModel(bb:flatbuffers.ByteBuffer, obj?:PModel):PModel {
  return (obj || new PModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPModel(bb:flatbuffers.ByteBuffer, obj?:PModel):PModel {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('PZKM');
}

author():string|null
author(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
author(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

createTime(obj?:time):time|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new time()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modelName():string|null
modelName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modelName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modelRuntimeInputNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

modelRuntimeOutputNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

modelRuntimeInputId(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

modelRuntimeInputIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

modelRuntimeInputIdArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

modelRuntimeOutputId(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

modelRuntimeOutputIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

modelRuntimeOutputIdArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

allTensorNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

tensorBuffer(index: number, obj?:Tensor):Tensor|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new Tensor()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tensorBufferLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

layerNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

layerBuffer(index: number, obj?:Layer):Layer|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new Layer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

layerBufferLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPModel(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addAuthor(builder:flatbuffers.Builder, authorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, authorOffset, 0);
}

static addCreateTime(builder:flatbuffers.Builder, createTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, createTimeOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, versionOffset, 0);
}

static addModelName(builder:flatbuffers.Builder, modelNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, modelNameOffset, 0);
}

static addModelRuntimeInputNum(builder:flatbuffers.Builder, modelRuntimeInputNum:number) {
  builder.addFieldInt32(4, modelRuntimeInputNum, 0);
}

static addModelRuntimeOutputNum(builder:flatbuffers.Builder, modelRuntimeOutputNum:number) {
  builder.addFieldInt32(5, modelRuntimeOutputNum, 0);
}

static addModelRuntimeInputId(builder:flatbuffers.Builder, modelRuntimeInputIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, modelRuntimeInputIdOffset, 0);
}

static createModelRuntimeInputIdVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createModelRuntimeInputIdVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createModelRuntimeInputIdVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startModelRuntimeInputIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addModelRuntimeOutputId(builder:flatbuffers.Builder, modelRuntimeOutputIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, modelRuntimeOutputIdOffset, 0);
}

static createModelRuntimeOutputIdVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createModelRuntimeOutputIdVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createModelRuntimeOutputIdVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startModelRuntimeOutputIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAllTensorNum(builder:flatbuffers.Builder, allTensorNum:number) {
  builder.addFieldInt32(8, allTensorNum, 0);
}

static addTensorBuffer(builder:flatbuffers.Builder, tensorBufferOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, tensorBufferOffset, 0);
}

static createTensorBufferVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTensorBufferVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLayerNum(builder:flatbuffers.Builder, layerNum:number) {
  builder.addFieldInt32(10, layerNum, 0);
}

static addLayerBuffer(builder:flatbuffers.Builder, layerBufferOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, layerBufferOffset, 0);
}

static createLayerBufferVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLayerBufferVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPModel(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPModelBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PZKM');
}

static finishSizePrefixedPModelBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'PZKM', true);
}

}
